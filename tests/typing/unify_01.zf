# expect: unsat
# exercize rewriting

val set : type -> type.

val mem : pi a. a -> set a -> prop.

def union : pi a. set a -> set a -> set a where
  forall (a : type) (s1 s2 : set a) (x : a).
    mem a x (union a s1 s2) <=> mem a x s1 || mem a x s2 .

def subeq : pi a. set a -> set a -> prop where
  forall (a : type) (s1 s2 : set a).
    subeq a s1 s2 <=> (forall (x : a). mem a x s1 => mem a x s2).

goal
  forall (a : type) (A B C : set a).
    subeq a (union _ A B) C => subeq _ A C && subeq _ B C.
